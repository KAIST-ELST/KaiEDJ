using SparseArrays
using LinearAlgebra
using Arpack
using ThreadedSparseCSR
using SparseMatricesCSR
using Base.Threads

export Hamil
export ConstructHamil_ij!
export ConstructHamilAll_ij!
export MakeSparseComplexMatrix
export MakeSparseComplexMatrix!
# export CheckConvertSymmetric!
export SearchGSSector
export GetGSFromSector
export GetGSFromSectorLanczos
export GetGreenImpurityOrbFromGS
export GetGreenImpurityFromGS

mutable struct Hamil
    MatSparse::SparseMatrixCSC
    Hamil( dim::Int ) = new( spzeros(ComplexF64, dim,dim) )
end

using TimerOutputs

function ConstructHamil_ij!( H::Hamil, opca::OpCA, HashF::Vector{Int64}, HashFInv::T ; outputlevel=0 , TO=nothing, ratbuffer=15 )  where T # HashF is equiv to the hashing function mapping i to binst
    dim = length( HashF )
    v       = opca.v
    l, m    = opca.i
    nthreads    = Threads.nthreads()
    nbuffer     = div( ratbuffer*dim , nthreads )
    I   = [ ones(Int, nbuffer) for i in 1:nthreads ]
    J   = [ ones(Int, nbuffer) for i in 1:nthreads ]
    V   = [ zeros(Float64, nbuffer) for i in 1:nthreads ]
    nnz   = zeros(Int,nthreads)
    Threads.@threads for indBin_i in 1:dim 
        binst_i             = HashF[indBin_i]-1 
        FerSign, indBin_j   = OpCAIndBinst( opca, indBin_i, HashF, HashFInv )
        if (indBin_j > 0)
            id_th   = Threads.threadid()
            nnz[id_th] += 1
            nnz_th  = nnz[id_th]
            I[id_th][nnz_th]    = indBin_i
            J[id_th][nnz_th]    = indBin_j
            V[id_th][nnz_th]    = v * FerSign
            # @timeit TO "add_Hspth" Hspth[Threads.threadid()][indBin_i, indBin_j] += v * FerSign
            # if outputlevel > 0
            #     println( "(CdagC:$(opca.i))", " i=$(indBin_i) j=$(indBin_j) ; ", "binst_i : ", getbittaili(binst_i), " , binst_j : ", getbittaili(HashF[indBin_j]), " , FerSign : $(FerSign)" )
            # end
        end
    end
    for i in 1:nthreads
        resize!( I[i], nnz[i] )
        resize!( J[i], nnz[i] )
        resize!( V[i], nnz[i] )
    end
    I   = collect(Iterators.flatten(I)) # [ (I...)... ]
    J   = collect(Iterators.flatten(J)) # [ (J...)... ]
    V   = collect(Iterators.flatten(V)) # [ (V...)... ]
    nnz = collect(Iterators.flatten(nnz)) # [ (nnz...)... ]
    Hspth    = sparse(I, J, V, dim, dim)
    H.MatSparse += Hspth
    # for i in 1:nthreads
    #     resize!( I[i], nnz[i] )
    #     resize!( J[i], nnz[i] )
    #     resize!( V[i], nnz[i] )
    #     Hspth    = sparse(I[i],J[i],V[i], dim, dim)
    #     @timeit TO "add_H" H.MatSparse += Hspth
    # end
end

function ConstructHamil_ij!( H::Hamil, opccaa::OpCCAA, HashF::Vector{Int64}, HashFInv::T ; outputlevel=0 , TO=nothing, ratbuffer=15 ) where T
    dim = length( HashF )
    v               = opccaa.v
    l1, l2, l3, l4  = opccaa.i
    nthreads    = Threads.nthreads()
    nbuffer     = div( ratbuffer*dim , nthreads )
    I   = [ ones(Int, nbuffer) for i in 1:nthreads ]
    J   = [ ones(Int, nbuffer) for i in 1:nthreads ]
    V   = [ zeros(Float64, nbuffer) for i in 1:nthreads ]
    nnz   = zeros(Int,nthreads)
    Threads.@threads for indBin_i in 1:dim 
        binst_i             = HashF[indBin_i]-1 
        FerSign, indBin_j   = OpCCAAIndBinst( opccaa, indBin_i, HashF, HashFInv )
        # if outputlevel > 0 
        #     try 
        #         println( "(CdagCdagCC:$(opccaa.i))", " i=$(indBin_i) j=$(indBin_j) ; ", "binst_i : ", getbittaili(binst_i), " , binst_j : ", getbittaili(HashF[indBin_j]), " , FerSign : $(FerSign)" )
        #     catch
        #         println( "(CdagCdagCC:$(opccaa.i))", " i=$(indBin_i) j=$(indBin_j) ; ", "binst_i : ", getbittaili(binst_i) )
        #     end
        # end
        if (indBin_j > 0)
            id_th   = Threads.threadid()
            nnz[id_th] += 1
            nnz_th  = nnz[id_th]
            I[id_th][nnz_th] = indBin_i
            J[id_th][nnz_th] = indBin_j
            V[id_th][nnz_th] = v * FerSign
            # @timeit TO "add_Hspth" Hspth[Threads.threadid()][indBin_i, indBin_j] += v * FerSign
            # println( "(CdagCdagCC:$(opccaa.i))", " i=$(indBin_i) j=$(indBin_j) ; ", "binst_i : ", getbittaili(binst_i), " , binst_j : ", getbittaili(HashF[indBin_j]))
        end
    end
    for i in 1:nthreads
        resize!( I[i], nnz[i] )
        resize!( J[i], nnz[i] )
        resize!( V[i], nnz[i] )
    end
    I   = collect(Iterators.flatten(I)) # [ (I...)... ]
    J   = collect(Iterators.flatten(J)) # [ (J...)... ]
    V   = collect(Iterators.flatten(V)) # [ (V...)... ]
    nnz = collect(Iterators.flatten(nnz)) # [ (nnz...)... ]
    Hspth    = sparse(I, J, V, dim, dim)
    H.MatSparse += Hspth
    # for i in 1:nthreads
    #     resize!( I[i], nnz[i] )
    #     resize!( J[i], nnz[i] )
    #     resize!( V[i], nnz[i] )
    #     Hspth    = sparse(I[i],J[i],V[i], dim, dim)
    #     @timeit TO "add_H" H.MatSparse += Hspth
    # end
end

function MakeSparseComplexMatrix( M ) 
    mr  = sparse(real(M))
    mi  = sparse(imag(M))
    return sparse( mr + mi *im )
end

function MakeSparseComplexMatrix!( M ) 
    mr  = sparse(real(M))
    mi  = sparse(imag(M))
    M   = sparse( mr + mi *im )
end

## It is NOT working somehow ##
# function CheckConvertSymmetric!( M ) 
#     if issymmetric(M)
#         mr  = sparse(real(M))
#         M   = deepcopy(sparse(mr) * 0)
#         @show count(!iszero, M)
#         println( "CheckConvertSymmetric :: okay done.")
#     end
# end

## Usingle : on-site interaction tensor for a single-band ##
# Uijkl   = OpCCAA[]
# push!( Uijkl, OpCCAA( U, [1,2,2,1] ) )

## Ut2g : on-site interaction tensor for t2g shell ##
# Uijkl   = OpCCAA[]
# # pushing example : push!( Uijkl, OpCCAA( 1, [1,2,2,1] ) )
# push!( Uijkl, OpCCAA( U,             [2*i-1, 2*i  , 2*i,     2*i-1] ) ) ## t2g : intra-orbital density-density  ##
# push!( Uijkl, OpCCAA( U-2.0*JHund,   [2*i-1, 2*j  , 2*j,     2*i-1] ) ) ## t2g : inter-orbital density-density  ## # i != j , opposite-spin
# push!( Uijkl, OpCCAA( U-3.0*JHund,   [2*i-1, 2*j-1, 2*j-1,   2*i-1] ) ) ## t2g : inter-orbital density-density  ## # i <  j , up-spin
# push!( Uijkl, OpCCAA( U-3.0*JHund,   [2*i  , 2*j  , 2*j  ,   2*i  ] ) ) ## t2g : inter-orbital density-density  ## # i <  j , dn-spin
# push!( Uijkl, OpCCAA( -JHund,        [2*i-1, 2*j,   2*j-1,   2*i  ] ) ) ## t2g : pair-exchange                  ## # i != j , up|dn => dn|up
# push!( Uijkl, OpCCAA(  JHund,        [2*i-1, 2*i,   2*j  ,   2*j-1] ) ) ## t2g : pair-hopping                   ## # i != j , i,up|i,dn => j,up|j,dn
## Actual code ##
# Uijkl   = OpCCAA[]
# U       = 10.0
# JHund   = 1.0
# for i in 1:norb 
#     push!( Uijkl, OpCCAA( U,             [2*i-1, 2*i  , 2*i,     2*i-1] ) ) ## t2g : intra-orbital density-density  ##
#     for j in 1:norb 
#         if i!=j
#             push!( Uijkl, OpCCAA( U-2.0*JHund,   [2*i-1, 2*j  , 2*j,     2*i-1] ) ) ## t2g : inter-orbital density-density  ## # i != j , opposite-spin
#             push!( Uijkl, OpCCAA( -JHund,        [2*i-1, 2*j,   2*j-1,   2*i  ] ) ) ## t2g : pair-exchange                  ## # i != j , up|dn => dn|up
#             push!( Uijkl, OpCCAA(  JHund,        [2*i-1, 2*i,   2*j  ,   2*j-1] ) ) ## t2g : pair-hopping                   ## # i != j , i,up|i,dn => j,up|j,dn
#         end
#         if j<i
#             push!( Uijkl, OpCCAA( U-3.0*JHund,   [2*i-1, 2*j-1, 2*j-1,   2*i-1] ) ) ## t2g : inter-orbital density-density  ## # i <  j , up-spin
#             push!( Uijkl, OpCCAA( U-3.0*JHund,   [2*i  , 2*j  , 2*j  ,   2*i  ] ) ) ## t2g : inter-orbital density-density  ## # i <  j , dn-spin
#         end
#     end
# end

function ConstructHamilAll_ij!( H::Hamil, opcaVV::Vector{Vector{OpCA}}, opccaaVV::Vector{Vector{OpCCAA}}, HashF, HashFInv ; outputlevel=0 )  # HashF is equiv to the hashing function mapping i to binst
    for opcaV in opcaVV
        for opca in opcaV
            println(" Constructing opca $(opca) ..." )
            ConstructHamil_ij!( H, opca, HashF, HashFInv ; outputlevel=outputlevel ) 
        end
    end
    for opccaaV in opccaaVV
        for opccaa in opccaaV
            println(" Constructing opccaa $(opccaa) ..." )
            ConstructHamil_ij!( H, opccaa, HashF, HashFInv ; outputlevel=outputlevel ) 
        end
    end
end

function ConstructHamilAll_ij!( H::Hamil, opcaVec::Vector{OpCA}, opccaaVec::Vector{OpCCAA}, HashF, HashFInv ; outputlevel=0 )  # HashF is equiv to the hashing function mapping i to binst
    for opca in opcaVec
        println(" Constructing opca $(opca) ..." )
        ConstructHamil_ij!( H, opca, HashF, HashFInv ; outputlevel=outputlevel ) 
    end
    for opccaa in opccaaVec
        println(" Constructing opccaa $(opccaa) ..." )
        ConstructHamil_ij!( H, opccaa, HashF, HashFInv ; outputlevel=outputlevel ) 
    end
end

function SearchGSSector( ntot, opcavec, opccaavec ; TolGS=1e-8, outputlevel=0 ) 
    hashfsec    = HashingIntToSecarrBin(;norb=ntot, outputlevel=outputlevel-1)
    hashfinvsec = HashingInvSecarrBinToAllNparInt( hashfsec ; outputlevel=outputlevel-1)
    hashfinv    = HashingInvSecarrBinToInt( hashfsec ; outputlevel=outputlevel-1)

    nsector     = length(hashfsec)
    Emin_arr    = zeros(nsector)
    println("GSSector Info : ")
    dimsec_arr  = [ length(hashfdum) for hashfdum in hashfsec ]
    for idum in Iterators.enumerate( dimsec_arr ) 
        @show idum
    end
    println("")

    if outputlevel > 0 
        println("Searching GSSector ...")
    end
    for isector in 1:nsector
        HashF       = hashfsec[isector]
        HashFInv    = hashfinv
        wfargs      = [ HashFInv ]
        DimSec      = length(HashF)
        if outputlevel > 0 
            println("$(isector)-th sector ; dim = $(DimSec)" )
        end 
        ######## Setting Up Hamiltonian Matrix of Each Sector from Operator #########
        HSec   = Hamil( DimSec )
        HSec.MatSparse  = zero(HSec.MatSparse)
        ConstructHamilAll_ij!( HSec, opcavec, opccaavec, HashF, HashFInv )
    
        if DimSec < 2 
            Emin_arr[isector] = HSec.MatSparse[1,1]
        else 
            ######## Look-over Hamiltonian Diagonalization #########
            nev = DimSec > 12 ? 12 : DimSec-2
            try 
                # @time global esys_AR = eigs( HSec.MatSparse ; which=:SR , nev = nev, tol=TolGS )
                vec0    = normalize!(rand(Complex{Float64}, DimSec))
                @time global esys_AR = LanczosIter(HSec.MatSparse, vec0, nev)
            catch y
                if isa( y, ArgumentError )
                    @show isector
                    @show HashF
                    @show DimSec
                    @show size(HSec.MatSparse)
                    @show HSec.MatSparse
                    global esys_eig = eigen( collect(HSec.MatSparse) )
                    global esys_AR = [esys_eig.vales transpose(esys_eig.vectors)]
                else
                    @show isector
                    @show HashF
                    @show DimSec
                    @show size(HSec.MatSparse)
                    @show HSec.MatSparse
                    println("WARNNING:: Cannot diagonalize $(isector)-th sector.")
                end
            end
            eval_sec    = esys_AR[1]
            Emin_arr[isector]   = real(eval_sec[1])
        end
        flush(stdout)
    end
    if outputlevel == 1 
        println( "" )
        println( "Minimum energy eigenvalue for each sector :" )
        for isector in 1:nsector
            println( "$(isector)-th sector Emin = $(Emin_arr[isector])" )
        end
        println( "" )
    end
    return Emin_arr
end

function GetGSFromSector( isector, ntot, opcavec, opccaavec ; TolGS=1e-8, outputlevel=0, nev=12 ) 
    hashfsec    = HashingIntToSecarrBin(;norb=ntot )
    hashfinvsec = HashingInvSecarrBinToAllNparInt( hashfsec )
    hashfinv    = HashingInvSecarrBinToInt( hashfsec )

    nsector     = length(hashfsec)

    HashF       = hashfsec[isector]
    HashFInv    = hashfinv
    wfargs      = [ HashFInv ]
    DimSec      = length(HashF)
    
    ######## Setting Up Hamiltonian Matrix of Each Sector from Operator #########
    HSec   = Hamil( DimSec )
    HSec.MatSparse  = zero(HSec.MatSparse)
    ConstructHamilAll_ij!( HSec, opcavec, opccaavec, HashF, HashFInv )
    
    global esys_AR = eigs( HSec.MatSparse ; which=:SR , nev = nev, tol=TolGS ) ## ith-eval => esAr[1][i] ; ith-evec => esAr[2][:,i]
    evals    = esys_AR[1]
    if outputlevel > 0 
        neval   = length(evals)
        println( "" )
        println( "$(isector)-th sector energy eigenvalues :" )
        for ieval in 1:neval
            println( "$(isector)-th sector, $(ieval)-th energy = $(evals[ieval])" )
        end
        println( "" )
    end
    flush(stdout)
    return esys_AR
end

function LanczosIter( HMat, v0, nev ; nlanc=100, TolLancGS=1e-12 ) 
    vi  = deepcopy( v0 )
    evals_v = []
    evecs_v = []
    ThreadedSparseCSR.multithread_matmul(BaseThreads())
    Hcsr    = SparseMatrixCSR( Transpose(HMat) )
    for ilanc in 1:nlanc 
        HL, VL  = lanczos_algorithm( Hcsr, vi, nev )
        esys    = eigen(HL)
        if ilanc%5 ==0
            println( "iter_lanc ($(ilanc)/$(nlanc)) : eig = $(real(esys.values))" )
            flush(stdout)
        end
        vf  = VL[:,1:nev] * esys.vectors[:,1]
        evals_v = deepcopy( esys.values )
        evecs_v = deepcopy( VL[:,1:nev] * esys.vectors )
        if abs2(dot(vi,vf))> 1-TolLancGS
            break
        end
        vi  = vf
    end
    return evals_v, evecs_v
end

function GetGSFromSectorLanczos( isector, ntot, opcavec, opccaavec ; TolGS=1e-8, outputlevel=0, nev=12 ) 
    hashfsec    = HashingIntToSecarrBin(;norb=ntot )
    hashfinvsec = HashingInvSecarrBinToAllNparInt( hashfsec )
    hashfinv    = HashingInvSecarrBinToInt( hashfsec )

    nsector     = length(hashfsec)

    HashF       = hashfsec[isector]
    HashFInv    = hashfinv
    wfargs      = [ HashFInv ]
    DimSec      = length(HashF)
    
    ######## Setting Up Hamiltonian Matrix of Each Sector from Operator #########
    HSec   = Hamil( DimSec )
    HSec.MatSparse  = zero(HSec.MatSparse)
    ConstructHamilAll_ij!( HSec, opcavec, opccaavec, HashF, HashFInv )
    
    vec0    = normalize!(rand(Complex{Float64}, DimSec))
    nvec    = DimSec > nev ? nev : DimSec
    global esys_AR = LanczosIter(HSec.MatSparse, vec0, nvec )
    evals    = esys_AR[1]
    if outputlevel > 0 
        neval   = length(evals)
        println( "" )
        println( "$(isector)-th sector energy eigenvalues :" )
        for ieval in 1:neval
            println( "$(isector)-th sector, $(ieval)-th energy = $(evals[ieval])" )
        end
        println( "" )
    end
    flush(stdout)
    return esys_AR
end

function GetGreenImpurityOrbFromGS(  iorb, jorb, GSSectorInfo_i, ntot, opcavec, opccaavec, FreqGrid ; NvecLanc=700 )
    hashfsec    = HashingIntToSecarrBin(;norb=ntot )
    hashfinvsec = HashingInvSecarrBinToAllNparInt( hashfsec )
    hashfinv    = HashingInvSecarrBinToInt( hashfsec )
    wfargs      = [ hashfinv ]

    isector = GSSectorInfo_i[1][1]
    Eimp0   = GSSectorInfo_i[2]
    wboltz  = GSSectorInfo_i[3]
    gsamp   = GSSectorInfo_i[4]

    HashF       = hashfsec[isector]
    HashFAni    = hashfsec[isector-1]
    HashFCre    = hashfsec[isector+1]
    DimSec      = length(HashF)
    DimSecAni   = length(HashFAni)
    DimSecCre   = length(HashFCre)

    wf      = WF(DimSec, HashF, gsamp, wfargs... )
    ciwf    = WF(DimSecAni, HashFAni, wfargs... )
    cdagiwf = WF(DimSecCre, HashFCre, wfargs... )

    ci      = OpA( 1.0, [iorb] ) 
    OpAWFadd( ci, wf, ciwf ) 
    cdagi   = OpC( 1.0, [jorb] ) 
    OpCWFadd( cdagi, wf, cdagiwf ) 
    # println( "$(iorb) $(jorb) ciwf    norm : $(norm(    ciwf.Probamp ))" )
    # println( "$(iorb) $(jorb) cdagiwf norm : $(norm( cdagiwf.Probamp ))" )


    HSecAni   = Hamil( DimSecAni )
    HSecCre   = Hamil( DimSecCre )
    HSecAni.MatSparse  = deepcopy(zero(HSecAni.MatSparse))
    HSecCre.MatSparse  = deepcopy(zero(HSecCre.MatSparse))

    ConstructHamilAll_ij!( HSecAni, opcavec, opccaavec, HashFAni, hashfinv )
    ConstructHamilAll_ij!( HSecCre, opcavec, opccaavec, HashFCre, hashfinv )

    ydat1   = GetGreenFromHCFcoeffA(    HSecAni.MatSparse, ciwf.Probamp,    FreqGrid, Eimp0 ; NvecLanc=NvecLanc)
    ydat2   = GetGreenFromHCFcoeffAdag( HSecCre.MatSparse, cdagiwf.Probamp, FreqGrid, Eimp0 ; NvecLanc=NvecLanc)
    return ydat1 + ydat2
end

function GetGreenImpurityFromGS(  norb::Int, GSSectorInfo_i, ntot::Int, opcavec, opccaavec, FreqGrid ; NvecLanc=700 )
    gorb    = [ [[] for i in 1:norb] for j in 1:norb]
    for (iorb, jorb) in Iterators.product( 1:norb, 1:norb )
        delta_ij    = iorb==jorb ? 1.0 : 0.0
        gorb[iorb][jorb] = GetGreenImpurityOrbFromGS(  iorb, jorb, GSSectorInfo_i, ntot, opcavec, opccaavec, delta_ij*FreqGrid ; NvecLanc=NvecLanc )
    end
    nfreq   = length(FreqGrid)
    GorbFormatted    = Matrix{ComplexF64}[ zeros(ComplexF64,norb,norb) for ifreq in 1:nfreq ]
    for (iorb, jorb, ifreq) in Iterators.product( 1:norb, 1:norb, 1:nfreq )
        GorbFormatted[ifreq][iorb,jorb] = deepcopy(gorb[iorb][jorb][ifreq])
    end
    return GorbFormatted
end
